language: generic 

services:
  - docker

  # build context specifically where all the project files for the image can be found
before_install:
  - docker build -t jasonclerkin/react-test -f ./client/Dockerfile.dev ./client
  # - docker build myotherproject (run tests in other apps)

script:
  # default: npm test enters watch mode so doesn't exit ->CI=true (tests script eventually exists with status code of 0 or  not 0 if failed )
  - docker run -e CI=true jasonclerkin/react-test npm run test
  #  docker run myother project (run tests in other apps) overide start up command with e.g. npm test

  # add on the configuration that's going to build production version of all of our projects
  # and then  push them off to Docker hub
  after_sucess:
    # dont need to pass in dockerfile as will use the default Dockerfile
    # gonna go through each of these sub folders and build images using the production Dockerfile
    - docker build -t jasonclerkin/multi-client ./client
    - docker build -t jasonclerkin/multi-nginx ./nginx
    - docker build -t jasonclerkin/multi-server ./server
    - docker build -t jasonclerkin/multi-worker ./worker

    # Log in to the docker cli
      # not going to write username, password in file ->
      # Set up encrypted enviromental variables only accessible through travis ci
      # https://travis-ci.com/github/jason-clerkin/multi-docker/settings
    # login in step in one command (dont want to open wizard)
    #  echo "$DOCKER_PASSWORD" will retrieve docker password from env variable
    # and emit that over standard in as input to the next command
    # essentially the command the other side of the pipe -> docker login -u "DOCKER_ID" --password-stdin
    - echo "$DOCKER_PASSWORD" | docker login -u "DOCKER_ID" --password-stdin

   # Take those images and push them to docker hub
    - docker push jasonclerkin/multi-client 
    - docker push jasonclerkin/multi-nginx 
    - docker push jasonclerkin/multi-server 
    - docker push jasonclerkin/multi-worker 